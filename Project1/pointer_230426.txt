포인터 : 주소값
└ 포인터 변수 : 주소를 담는 변수
└ 포인터 상수 : 주소를 담는 상수(배열)

연산자
└ & : 주소 연산자(번지 연산자)
└ 자료형* : 포인터 연산자
└ *주소값 : 참조 연산자



< 포인터를 사용하는 이유 >

1. 다른 영역에 있는 변수의 값을 수정하기 위해
	└ 함수는 한 개의 값만 리턴할 수 있으므로 포인터를 사용해서 값을 변경할 수 있다.
	└ return 하지 않고도 충분히 값을 바꿀 수 있기때문에 제약이 줄어든다!

2. 동적 메모리 할당
	└ 이중포인터도 흥미롭지만 포인터에 대해 더 자세히 공부하는 게 좋다.
	└ 필요한 헤더 파일: <stdlib.h>
	└ 동적 할당(dynamic allocation)
	└ 동적 배열 할당
		- 자료형* 포인터명 = (자료형*)malloc(sizeof(자료형) * 길이);
		- 몇 개의 데이터가 들어올지 모를 때 사용
		- malloc 의 return 타입은 void pointer
	└ 동적 배열 초기화(clear allocation)
		- 자료형* 포인터명 = (자료형*)calloc(길이, sizeof(자료형));
		- byte의 값이 초기화
	└ 동적 배열 크기 변경(resize allocation)
		- 포인터명 = (자료형*)realloc(포인터명, sizeof(자료형)*길이);
	└ 동적 메모리 해제★
		- free(포인터명);
		- 메모리를 해제하지 않으면 사라지지 않고 남아있기 때문에 반드시 free함수로 메모리 해제를 해주어야 한다.


Call by Reference : C언어에는 없고 C++에만 있다
Call by Value : 값/이름으로 호출하는 방법?
Call by Address : 포인터를 이용해 주소값을 가져와서 호출하는 방법